
name : push

on : [ push ]

jobs :

  # fast :
  #   services:
  #     postgres:
  #       image: postgres
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #       ports:
  #         # Maps TCP port 5432 in the service container to a randomly chosen available port on the host.
  #         - 5432
  #     postgres2:
  #       image: postgres
  #       env:
  #         POSTGRES_PASSWORD: postgres
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 10
  #       ports:
  #         # Maps TCP port 5432 in the service container to a randomly chosen available port on the host.
  #         - 5433
  #
  #   runs-on : ubuntu-latest
  #   steps :
  #     - run: echo ${{ job.id }}
  #     - run: echo "${{ toJson( job ) }}"
  #     - name: get id
  #       id : id
  #       run: |
  #         id=$(/usr/bin/docker ps --all --filter status=running --no-trunc --format "{{.ID}}")
  #         echo its id $id
  #         echo "::set-output name=id::$id"
  #     - run: echo "${{ toJson( steps.id ) }}"
  #     - run: /usr/bin/docker inspect ${{ steps.id.outputs.id }}

  fast:
    strategy :
      matrix :
        modules :
          - success
          - module1
          - module2
          - module3
    outputs:
      result: ${{ steps.result.outputs.result }}
    runs-on : ubuntu-latest
    steps :
      - if : ${{ steps.result.outputs.result != 'success' }}
        id: result
        run: echo "::set-output name=result::${{ matrix.modules }}"

  second:
    needs: fast
    runs-on: ubuntu-latest
    steps:
      - run: echo "${{ toJson( needs ) }}"
